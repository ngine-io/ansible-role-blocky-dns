---
- name: Create group
  ansible.builtin.group:
    name: blocky

- name: Create user
  ansible.builtin.user:
    name: blocky
    group: blocky
    create_home: false
    system: true

- name: Ensure install and conf dirs exist
  ansible.builtin.file:
    path: "{{ item }}"
    mode: "0755"
    group: blocky
    owner: blocky
    state: directory
  with_items:
    - "{{ blocky__install_path }}/{{ blocky__base }}"

- name: Check if blocky has been installed already
  ansible.builtin.stat:
    path: "{{ blocky__install_path }}/{{ blocky__base }}/blocky"
  register: install_status

- name: Download blocky archive
  ansible.builtin.get_url:
    url: "{{ blocky__download_url }}"
    dest: "{{ blocky__download_path }}/{{ blocky__base }}.tgz"
    group: root
    owner: root
    mode: "0644"
    checksum: "sha256:{{ blocky__checksum_url }}"
    force: false
  when: not install_status.stat.exists
  register: download_status

- name: Expand blocky archive
  ansible.builtin.unarchive:
    src: "{{ blocky__download_path }}/{{ blocky__base }}.tgz"
    dest: "{{ blocky__install_path }}/{{ blocky__base }}/"
    group: root
    owner: root
    mode: "0755"
    copy: false
  when: download_status.changed or not install_status.stat.exists

- name: Ensure owner and mode of blocky binary
  ansible.builtin.file:
    path: "{{ blocky__install_path }}/{{ blocky__base }}/blocky"
    group: blocky
    owner: blocky
    mode: "0755"
  notify: Restart blocky

- name: Create link to blocky
  ansible.builtin.file:
    src: "{{ blocky__install_path }}/{{ blocky__base }}/blocky"
    dest: "{{ blocky__install_path }}/blocky"
    group: blocky
    owner: blocky
    mode: "0755"
    state: link
  notify: Restart blocky

- name: Determine config template to use
  block:
    - name: Clean up version
      ansible.builtin.set_fact:
        blocky__version_cleaned: "{{ blocky__version | regex_replace('^v(.*)$', '\\1') }}"

    - name: Get correct template
      ansible.builtin.set_fact:
        blocky__config_template: "{{ item.template }}"
      when: (item.min_version is defined and item.max_version is defined
                and blocky__version_cleaned is version(item.min_version, '>=') and blocky__version_cleaned is version(item.max_version, '<='))
            or (item.max_version is defined and item.min_version is not defined and blocky__version_cleaned is version(item.max_version, '<='))
            or (item.min_version is defined and item.max_version is not defined and blocky__version_cleaned is version(item.min_version, '>='))
      with_items: "{{ blocky__config_template_versions }}"

    - name: Assert a config template was found
      ansible.builtin.assert:
        that: blocky__config_template is defined
        fail_msg: "No config template found for requested blocky version {{ blocky__version }}! That version might not be supported by this role!"

- name: "Inline blocklists: Create dict with inline blocklist goups"
  ansible.builtin.set_fact:
    __blocky__blocking_inline_blocklist_files: "{{ __blocky__blocking_inline_blocklist_files | default({}) |
                                                  ansible.builtin.combine({item.key: [blocky__install_path + '/blocklist_' + item.key + '.txt']}) }}"
  with_items: "{{ blocky__blocking_inline_blacklists | dict2items }}"

- name: "Inline blocklists: Store inline blocklists as file"
  ansible.builtin.copy:
    dest: "{{ item.value | first }}"
    content: "{{ blocky__blocking_inline_blacklists[item.key] | join('\n') }}"
    owner: root
    group: root
    mode: '0640'
  when:
    - blocky__blocking_inline_blacklists[item.key] is defined
    - blocky__blocking_inline_blacklists[item.key] | length > 0
  with_items: "{{ __blocky__blocking_inline_blocklist_files | default({}) | dict2items }}"

- name: "Inline blocklists: Merge explicitly configured and inline blocklist groups"
  ansible.builtin.set_fact:
    blocky__blocking_blacklists: "{{ blocky__blocking_blacklists | ansible.builtin.combine(__blocky__blocking_inline_blocklist_files,
                                                                                             list_merge='append', recursive=true) }}"
  when:
    - __blocky__blocking_inline_blocklist_files | length > 0

- name: "Inline allowlists: Create dict with inline allowlist goups"
  ansible.builtin.set_fact:
    __blocky__blocking_inline_allowlist_files: "{{ __blocky__blocking_inline_allowlist_files | default({}) |
                                                  ansible.builtin.combine({item.key: [blocky__install_path + '/allowlist_' + item.key + '.txt']}) }}"
  with_items: "{{ blocky__blocking_inline_whitelists | dict2items }}"

- name: "Inline allowlists: Store inline allowlists as file"
  ansible.builtin.copy:
    dest: "{{ item.value | first }}"
    content: "{{ blocky__blocking_inline_whitelists[item.key] | join('\n') }}"
    owner: root
    group: root
    mode: '0640'
  when:
    - blocky__blocking_inline_whitelists[item.key] is defined
    - blocky__blocking_inline_whitelists[item.key] | length > 0
  with_items: "{{ __blocky__blocking_inline_allowlist_files | default({}) | dict2items }}"

- name: "Inline allowlists: Merge explicitly configured and inline allowlist groups"
  ansible.builtin.set_fact:
    blocky__blocking_whitelists: "{{ blocky__blocking_whitelists | ansible.builtin.combine(__blocky__blocking_inline_allowlist_files,
                                                                                             list_merge='append', recursive=true) }}"
  when:
    - __blocky__blocking_inline_allowlist_files | length > 0

- name: Configure blocky
  ansible.builtin.template:
    src: "{{ blocky__config_template }}"
    dest: "{{ blocky__install_path }}/config.yaml"
    owner: root
    group: root
    mode: "0644"
  notify: Restart blocky

- name: Configure blocky service
  ansible.builtin.template:
    src: blocky.service.j2
    dest: /etc/systemd/system/blocky.service
    owner: root
    group: root
    mode: "0644"
  notify: Restart blocky

- name: Ensure blocky service is enabled and running
  ansible.builtin.systemd:
    name: blocky
    state: started
    daemon_reload: true
    enabled: true

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Ensure blocky is ready
  ansible.builtin.wait_for:
    port: "{{ (blocky__ports_dns | string | ansible.builtin.split(':') | last) if ':' in blocky__ports_dns | string else blocky__ports_dns }}"
    delay: 5
    timeout: 30
  retries: 5
  when: blocky__readiness_check_enabled
